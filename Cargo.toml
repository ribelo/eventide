
[package]
name = "syzygy"
version = "0.1.0"
edition = "2021"

[lib]
path = "src/lib.rs"

[features]
default = []
parallel = ["dep:rayon"]

[dependencies]
thiserror = "1.0"
rustc-hash = "2"
rayon = { version = "1.10", optional = true }
tokio = { version = "1.4", features = ["rt-multi-thread", "sync"]}
downcast-rs = "1.2"
log = "0.4"
bon = "3.3.0"
arc-swap = "1.7.1"

[dev-dependencies]
cfg-if = "1.0.0"

[lints.clippy]
all = { level = "warn", priority = -2 }

# restriction
dbg_macro = "warn"
todo = "warn"
unimplemented = "warn"

# I like the explicitness of this rule as it removes confusion around `clone`.
# This increases readability, avoids `clone` mindlessly and heap allocating on accident.
clone_on_ref_ptr = "warn"

# These two are mutually exclusive, I like `mod.rs` files for better fuzzy searches on module entries.
self_named_module_files = "warn"         # "-Wclippy::mod_module_files"
empty_drop = "warn"
empty_structs_with_brackets = "warn"
exit = "warn"
filetype_is_file = "warn"
get_unwrap = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
rest_pat_in_fully_bound_structs = "warn"
unnecessary_safety_comment = "warn"
undocumented_unsafe_blocks = "warn"

# I want to write the best Rust code so pedantic is enabled.
# We should only disable rules globally if they are either false positives, chaotic, or does not make sense.
pedantic = { level = "warn", priority = -1 }

# Allowed rules
# pedantic
# This rule is too pedantic, I don't want to force this because naming things are hard.
module_name_repetitions = "allow"
similar-names = "allow"

# All triggers are mostly ignored in this codebase, so this is ignored globally.
struct_excessive_bools = "allow"
too_many_lines = "allow"
doc_markdown = "allow"

# nursery
# `const` functions do not make sense for our project because this is not a `const` library.
# This rule also confuses new comers and forces them to add `const` blindlessly without any reason.
missing_const_for_fn = "allow"
missing_errors_doc = "allow"
missing_panics_doc = "allow"

multiple_bound_locations = "allow"
